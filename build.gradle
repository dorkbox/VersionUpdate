/*
 * Copyright 2018 dorkbox, llc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import dorkbox.license.License

import java.nio.file.Paths
import java.time.Instant

buildscript {
    // load properties from custom location
    def propsFile = Paths.get("${projectDir}/../../gradle.properties").toAbsolutePath().normalize().toFile()
    println("Loading custom property data from: ${propsFile}")

    def props = new Properties()
    propsFile.withInputStream { props.load(it) }
    props.each { key, val ->
        project.ext.set(key, val)
    }

    // for plugin publishing
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.gradle.publish:plugin-publish-plugin:0.9.10"
    }
}

plugins {
    id 'java'
    id 'java-gradle-plugin'
    id 'maven-publish'
    id 'signing'

    id "org.jetbrains.kotlin.jvm" version "1.2.51"
    id "com.dorkbox.Licensing" version "1.1.0"
}

// for publishing the plugin to gradle
apply plugin: "com.gradle.plugin-publish"


project.description = 'Plugin to set version information in maven POM, java or kotlin files, and git tags'
project.group = 'com.dorkbox'
project.version = '1.0.0'

project.ext.name = 'Gradle Licensing Plugin'
project.ext.id = 'Version'
project.ext.website = 'https://dorkbox.com/'
project.ext.url = 'https://git.dorkbox.com/dorkbox/Version'
project.ext.tags = ['version', 'versioning']

licensing {
    license(License.APACHE_2) {
        copyright 2012
        author 'dorkbox, llc'
        url project.ext.url
        note 'Plugin to set version information in maven POM, java or kotlin files, and git tags'
        note """Git tag code based upon 'gradle-git-version', Copyright 2015, Palantir Technologies. https://github.com/palantir/gradle-git-version"""
    }
}

sourceSets {
    main {
        java {
            setSrcDirs Collections.singletonList('src')
        }
    }
}

repositories {
    jcenter()
}


dependencies {
   implementation(project('Utilities')) {
       // don't include any of the project dependencies for anything
       transitive = false
   }

    implementation 'org.eclipse.jgit:org.eclipse.jgit:4.5.4+'

    compileOnly 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.2.51'

    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'

    runtime group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.6'
}


project('Utilities') {
    tasks.withType(Test) {
        // want to remove utilities project from unit tests. It's unnecessary to run unit tests for the entire Utilities project
        exclude('**/*')
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.incremental = true
        options.fork = true
        options.forkOptions.executable = 'javac'

        // setup compile options. we specifically want to suppress usage of "Unsafe"
        options.compilerArgs = ['-XDignore.symbol.file', '-Xlint:deprecation']
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.incremental = true
}

tasks.withType(Jar) {
    duplicatesStrategy DuplicatesStrategy.FAIL

    manifest {
        attributes['Implementation-Version'] = project.version
        attributes['Build-Date'] = Instant.now().toString()
    }
}

///////////////////////////////
//////    UTILITIES COMPILE (for inclusion into jars)
///////////////////////////////
task compileUtils(type: JavaCompile) {
    // we don't want the default include of **/*.java
    getIncludes().clear()

    source = Collections.singletonList('../Utilities/src/dorkbox/util')
    include('Version.java')

    classpath = sourceSets.main.compileClasspath
    destinationDir = file("$rootDir/build/classes_utilities")
}

///////////////////////////////
//////    Jar Tasks
///////////////////////////////
jar {
    dependsOn compileUtils

    // include applicable class files from subset of Utilities project
    from compileUtils.destinationDir
}




///////////////////////////////
//////    Plugin Publishing + Release
///////////////////////////////
gradlePlugin {
    plugins {
        Version {
            id = 'com.dorkbox.Version'
            implementationClass = 'dorkbox.version.VersionPlugin'
        }
    }
}

pluginBundle {
    website = project.ext.website
    vcsUrl = project.ext.url

    plugins {
        version {
            id = "${project.group}.${project.ext.id}"
            displayName = project.ext.name
            description = project.description
            tags = project.ext.tags
            version = project.version
        }
    }
}






///////////////////////////////
//////    Maven Publishing + Release
///////////////////////////////
task sourceJar(type: Jar) {
    description = "Creates a JAR that contains the source code."

    from sourceSets.main.allSource

    classifier = "sources"
}

task javaDocJar(type: Jar) {
    description = "Creates a JAR that contains the javadocs."

    classifier = "javadoc"
}

// for testing, we don't publish to maven central, but only to local maven
publishing {
    publications {
        version(MavenPublication) {
            from components.java

            artifact(javaDocJar)
            artifact(sourceJar)

            groupId project.group
            artifactId project.ext.id
            version project.version

            pom {
                name = project.ext.id
                url = project.ext.url
                description = project.description

                issueManagement {
                    url = "${project.ext.url}/issues".toString()
                    system = 'Gitea Issues'
                }

                organization {
                    name = 'dorkbox, llc'
                    url = 'https://dorkbox.com'
                }

                developers {
                    developer {
                        name = 'dorkbox, llc'
                        email = 'email@dorkbox.com'
                    }
                }

                scm {
                    url = project.ext.url
                    connection = "scm:${project.ext.url}.git".toString()
                }
            }
        }
    }
}

// we don't use maven with the plugin (it's uploaded separately to gradle plugins)
tasks.withType(PublishToMavenRepository) {
    onlyIf {
        repository == publishing.repositories.maven &&
        publication == publishing.publications.version
    }
}
tasks.withType(PublishToMavenLocal) {
    onlyIf {
        publication == publishing.publications.version
    }
}

signing {
    required { hasProperty('sonatypeUsername') }
    sign publishing.publications.version
}
